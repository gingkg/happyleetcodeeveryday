// leetcode_1306_III.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
/*
1306. 跳跃游戏 III
这里有一个非负整数数组 arr，你最开始位于该数组的起始下标 start 处。当你位于下标 i 处时，你可以跳到 i + arr[i] 或者 i - arr[i]。

请你判断自己是否能够跳到对应元素值为 0 的 任一 下标处。

注意，不管是什么情况下，你都无法跳到数组之外。



示例 1：

输入：arr = [4,2,3,0,3,1,2], start = 5
输出：true
解释：
到达值为 0 的下标 3 有以下可能方案：
下标 5 -> 下标 4 -> 下标 1 -> 下标 3
下标 5 -> 下标 6 -> 下标 4 -> 下标 1 -> 下标 3
示例 2：

输入：arr = [4,2,3,0,3,1,2], start = 0
输出：true
解释：
到达值为 0 的下标 3 有以下可能方案：
下标 0 -> 下标 4 -> 下标 1 -> 下标 3
示例 3：

输入：arr = [3,0,2,1,2], start = 2
输出：false
解释：无法到达值为 0 的下标 1 处。


提示：

1 <= arr.length <= 5 * 10^4
0 <= arr[i] < arr.length
0 <= start < arr.length
*/


#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    bool backtrack(vector<int>& arr, int p, vector<bool>& flag) {
        if (arr[p] == 0) {
            return true;
        }
        flag[p] = true;
        cout << p << " " << arr[p] << endl;
        // 选择
        if (p + arr[p] < arr.size() && (!flag[p+arr[p]])) {
            if (backtrack(arr, p + arr[p], flag)) {
                cout << p + arr[p] << endl;
                return true;
            }
            else {
                flag[p + arr[p]] = false;
                //return false;
            }
        }
        if (0 <= p - arr[p] && (!flag[p - arr[p]])) {
            if (backtrack(arr, p - arr[p], flag)) {
                cout << p - arr[p] << endl;
                return true;
            }
            else {
                flag[p - arr[p]] = false;
                //return false;
            }
        }
        return false;
    }


    bool canReach(vector<int>& arr, int start) {
        vector<bool> flag(arr.size(), false);
        return backtrack(arr, start, flag);
    }
};

int main()
{
    cout << "Hello World!\n";
    vector<int> arr = { 47, 26, 216, 78, 179, 101, 42, 233, 185, 56, 303, 310, 169, 338, 51, 104, 308, 162, 81, 82, 169, 41, 106, 150, 285, 298, 33, 251, 289, 236, 256, 227, 197, 186, 267, 326, 268, 243, 89, 347, 72, 0, 89, 157, 90, 333, 327, 76, 106, 68, 355, 124, 234, 70, 43, 248, 259, 280, 199, 201, 312, 327, 217, 278, 330, 258, 348, 351, 223, 240, 143, 244, 64, 343, 339, 101, 193, 18, 140, 312, 71, 225, 111, 79, 199, 226, 321, 344, 31, 177, 362, 115, 341, 79, 146, 303, 348, 291, 250, 169, 78, 307, 325, 33, 338, 316, 201, 343, 37, 37, 0, 15, 341, 38, 44, 67, 280, 128, 31, 106, 220, 172, 349, 142, 339, 181, 102, 351, 81, 209, 41, 181, 59, 216, 230, 170, 257, 52, 5, 338, 28, 75, 208, 307, 108, 103, 34, 342, 82, 233, 263, 12, 167, 358, 316, 150, 337, 158, 78, 231, 26, 22, 147, 81, 12, 319, 161, 12, 75, 129, 54, 119, 131, 334, 292, 253, 255, 98, 39, 67, 146, 15, 329, 120, 80, 347, 89, 124, 303, 315, 235, 55, 1, 100, 290, 187, 333, 326, 87, 138, 48, 41, 153, 118, 192, 152, 279, 69, 154, 71, 152, 273, 61, 153, 267, 51, 106, 225, 204, 327, 50, 15, 202, 244, 328, 3, 150, 355, 240, 240, 188, 92, 107, 244, 280, 102, 265, 273, 328, 115, 70, 221, 357, 101, 186, 251, 116, 24, 125, 58, 185, 34, 356, 21, 108, 221, 169, 208, 230, 226, 235, 336, 304, 315, 334, 329, 229, 190, 20, 104, 348, 132, 66, 265, 55, 212, 102, 167, 52, 2, 328, 114, 101, 196, 99, 155, 158, 337, 191, 119, 14, 347, 127, 305, 142, 156, 92, 340, 358, 58, 7, 178, 79, 355, 289, 199, 251, 233, 351, 57, 115, 306, 179, 31, 42, 123, 87, 101, 218, 71, 193, 205, 300, 180, 42, 19, 280, 233, 293, 181, 147, 359, 190, 168, 191, 5, 58, 198, 154, 139, 29, 342, 261, 245, 141, 26, 251, 162, 360, 219, 233, 297, 287, 262, 112, 87, 261, 21, 205, 131, 98, 161, 103, 57 };
    cout << arr.size() << endl;
    int start = 313;

    /*vector<int> arr = { 4,2,3,0,3,1,2 };
    int start = 0;*/
    Solution S;
    if (S.canReach(arr, start)) {
        cout << "true" << endl;
    }
    else {
        cout << "false" << endl;
    }
}

